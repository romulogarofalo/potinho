defmodule Potinho.User do
  use Ecto.Schema
  import Ecto.Changeset

  @primary_key {:id, Ecto.UUID, autogenerated: true}
  schema "users" do
    field :full_name_user, :string
    field :cpf, :string
    field :balance, Money.Ecto.Amount.Type
    field :password_hash, :string
    field :password, :string, virtual: true
    timestamps()
  end

  @required_attrs [:full_name_user, :password, :cpf]
  @castable_fields [:full_name_user, :password, :cpf, :balance]

  def changeset(changeset, attrs) do
    changeset
    |> cast(attrs, @castable_fields)
  end

  def create_changeset(attrs) do
    %__MODULE__{}
    |> cast(attrs, @castable_fields)
    |> validate_required(@required_attrs)
    |> validate_change(:cpf, &validate_cpf/2)
    |> unique_constraint([:cpf])
    |> put_password_hash()
  end

  defp put_password_hash(
         %Ecto.Changeset{valid?: true, changes: %{password: password}} = changeset
       ) do
    change(changeset, Bcrypt.add_hash(password))
  end

  defp put_password_hash(changeset), do: changeset

  def validate_cpf(_, cpf) do
    # fn :cpf, cpf ->
      if Brcpfcnpj.cpf_valid?(cpf) do
        []
      else
        [cpf: "invalid format"]
      end
    # end
  end
end
